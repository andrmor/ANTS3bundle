#include "apet_si.h"
#include "ageometryhub.h"
#include "avector.h"
#include "afiletools.h"

#include <iostream>
#include <fstream>
#include <ostream>
#include <ios>

#include <QDebug>
#include <QProcess>
#include <QDir>

APet_si::APet_si() :
    AScriptInterface() {}

void APet_si::createScanner(QString scannerName, double scannerRadius, double crystalDepth, double crystalSize)
{
    QString castorStr;
    const QStringList environment = QProcess::systemEnvironment();
    for (const QString & s : environment)
        if (s.contains("CASTOR_CONFIG="))
        {
            castorStr = s;
            castorStr.remove("CASTOR_CONFIG=");
            break;
        }

    if (castorStr.isEmpty())
    {
        abort("System environmental variable CASTOR_CONFIG is not configured!");
        return;
    }
    qDebug() << castorStr;

    QDir castorDir(castorStr);
    if (!castorDir.exists())
    {
        abort("System environmental variable CASTOR_CONFIG points to non-existent directory!");
        return;
    }

    QDir scannerDir(castorStr + "/scanner");
    if (!scannerDir.exists())
    {
        abort("Scanner directory not found!");
        return;
    }

    size_t numScint = AGeometryHub::getConstInstance().countScintillators();
    if (numScint == 0)
    {
        abort("Current configuration does not have defined scintillators!");
        return;
    }

    bool ok = makeLUT(castorStr + "/scanner/" + scannerName + ".lut");
    if (!ok) return;

    QString numScintStr = QString::number(numScint);

    QString header =
        "modality: PET\n"
        "scanner name: " + scannerName + "\n"
        "scanner radius: " + QString::number(scannerRadius) + "\n"
        "number of layers: 1\n"
        "number of elements: " + numScintStr + "\n"
        "number of crystals in layer: " + numScintStr + "\n"
        "crystals size depth: " + QString::number(crystalDepth) + "\n"
        "crystals size transaxial: " + QString::number(crystalSize) + "\n"
        "crystals size axial: " + QString::number(crystalSize) + "\n"
        "voxels number transaxial: 256\n"
        "voxels number axial: 128\n"
        "field of view transaxial: 200.0\n"
        "field of view axial: 100.0\n"
        "min angle difference: 0\n"
        "description: Auto-generated by ANTS3\n";

    ftools::saveTextToFile(header, castorStr + "/scanner/" + scannerName + ".hscan");
}

bool APet_si::makeLUT(QString fileName)
{
    std::ofstream outStream(fileName.toLatin1().data(), std::ios::out | std::ios::binary );
    if (!outStream.is_open())
    {
        abort("Cannot open file for writing: " + fileName);
        return false;
    }

    const AGeometryHub & GeoHub = AGeometryHub::getConstInstance();

    std::vector<AVector3> pos;
    GeoHub.getScintillatorPositions(pos);
    std::vector<AVector3> ori;
    GeoHub.getScintillatorOrientations(ori);

    for (size_t iScint = 0; iScint < pos.size(); iScint++)
    {
        for (size_t i = 0; i < 3; i++)
        {
            float tmp = (float)pos[iScint][i];
            outStream.write((char*)&tmp, sizeof(float));
        }
        for (size_t i = 0; i < 3; i++)
        {
            float tmp = (float)ori[iScint][i];
            outStream.write((char*)&tmp, sizeof(float));
        }
    }
    outStream.close();
    return true;
}

#include "apeteventbuilder.h"
void APet_si::buildEventsFromDeposition(QString depositionFileName, QString eventsFileName)
{
    size_t numScint = AGeometryHub::getConstInstance().countScintillators();
    APetEventBuilder eb(numScint, depositionFileName.toLatin1().data(), false);
    eb.makeEvents(eventsFileName.toLatin1().data(), false);
}

#include "apetcoincidencefinder.h"
void APet_si::findCoincidences(QString eventsFileName, QString coincFileName)
{
    size_t numScint = AGeometryHub::getConstInstance().countScintillators();
    APetCoincidenceFinder cf(numScint, eventsFileName.toLatin1().data(), false);
    cf.findCoincidences(coincFileName.toLatin1().data());
}
